syntax = "proto2";

message Game {
  repeated Journey journeys = 1;
  optional int32 next_journey = 2;

}

message Journey {
  optional int32 number  = 1;
  optional Theme theme = 2;
  repeated Move allowed_moves = 3;
  repeated Level levels = 4;
  repeated string symbols = 5;
  optional int32 minimum_star_number = 6;
  optional int32 next_level = 7;
}

message Level {
  optional int32 number = 1;
  // This is the rank of the level. A journey should have levels with
  // unique and sequential ranks.
  optional int32 size = 2;
  // How many moves the users is going to have to input
  optional int32 num_moves = 3;
  // How many non-self pawns will be present in the grid. 
  // If the value is 1, then the grid will contain two pawns:
  // self and 1 intruder.
  optional int32 num_aliens = 4;
  // The moves that are valid for this level
  // The name of the grid that this level uses.
  optional Grid grid = 5;

  // Whether the indigenous moves are randomly generated
  // (ie not chosen by the user).
  optional bool moves_are_randomly_generated = 6;

  // Number of milliseconds per move.
  // The total trajectory duration will be time_per_move_ms * moves.
  optional int32 time_per_move_ms = 7;

  // Number of trajectory iterations allowed
  // before the level will fail.
  optional int32 trajectory_iterations_allowed = 8;

  // Score obtained by the user. Unset if level not completed.
  optional int32 score = 9;
}

message Grid {
  optional string name = 1;
  optional int32 height = 2; 
  optional int32 width = 3;
  repeated Person aliens = 4;
  optional Person indigenous = 5; 
}

message Person {
  optional string id = 1;
  optional string color = 2;
  optional Position position = 3;
  optional Trajectory trajectory = 4;
  optional PersonType type = 5;
}

message Trajectory {
  repeated Move moves = 1;
}

message Position {
  // Value between 0 and 1
  // where 0 is left most and 1 is rightmost.
  optional int32 x_offset = 1;
  // Value between 0 and 1
  // where 0 is bottom most and 1 is topmost.
  optional int32 y_offset = 2;
}

message Move {
  optional MoveDirection direction = 1;
  optional MoveSpin spin = 2;
}

enum MoveDirection {
  MOVE_DIRECTION_UNSPECIFIED = 0;
  MOVE_DIRECTION_NORTH = 1;
  MOVE_DIRECTION_SOUTH = 2;
  MOVE_DIRECTION_WEST = 3;
  MOVE_DIRECTION_EAST = 4;
  MOVE_DIRECTION_SOUTH_EAST = 5;
  MOVE_DIRECTION_SOUTH_WEST = 6;
  MOVE_DIRECTION_NORTH_EAST = 7;
  MOVE_DIRECTION_NORTH_WEST = 8;
  MOVE_DIRECTION_DOUBLE_NORTH = 9;
  MOVE_DIRECTION_DOUBLE_SOUTH = 10;
  MOVE_DIRECTION_DOUBLE_WEST = 11;
  MOVE_DIRECTION_DOUBLE_EAST = 12;
}

enum MoveSpin {
  MOVE_SPIN_UNSPECIFIED = 0;
  MOVE_SPIN_HALF_CLOCKWISE = 1;
  MOVE_SPIN_HALF_COUNTER_CLOCKWISE = 2;
}

enum PersonType {
  PERSON_TYPE_UNSPECIFIED = 0;
  PERSON_TYPE_INDIGENOUS = 1;
  PERSON_TYPE_ALIEN = 2;
}

enum Theme {
  THEME_UNSPECIFIED = 0;
  THEME_BEACH = 1;
  THEME_MOUNTAIN = 2;
  THEME_SPACE = 3;
  THEME_FOOD = 4;
}

enum LevelStatus {
  LEVEL_STATUS_UNSPECIFIED = 0;
  LEVEL_STATUS_WIN = 1;
  LEVEL_STATUS_LOSE = 2;
}

enum BeadSelection {
  BEAD_SELECTION_UNSPECIFIED = 0;
  BEAD_SELECTION_CORRECT_GUESS = 1;
  BEAD_SELECTION_WRONG_GUESS = 2;
}

enum NextLevelAction {
  NEXT_LEVEL_ACTION_UNSPECIFIED = 0;
  NEXT_LEVEL_ACTION_RESTART_GAME = 1;
  NEXT_LEVEL_ACTION_RESTART_JOURNEY = 2;
  NEXT_LEVEL_ACTION_TRIGGER_NEXT_LEVEL = 3;
}
